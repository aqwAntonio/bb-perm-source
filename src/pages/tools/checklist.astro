---
import Layout from '../../layouts/Layout.astro';
---

<Layout>
	<section class="prose prose-zinc dark:prose-invert max-w-none">
		<h1>Чек‑лист тренировки</h1>
		<p>Отметьте пункты перед/после тренировки. Пункты можно редактировать и менять порядок.</p>
		<div class="not-prose grid gap-4 max-w-xl">
			<ul id="list" class="grid gap-2"></ul>
			<div class="flex gap-2">
				<input id="newItem" class="border rounded px-3 py-2 flex-1" placeholder="Добавить пункт" />
				<button id="add" class="rounded border px-3 py-2">Добавить</button>
			</div>
		</div>
	</section>
</Layout>

<script>
  const listEl = document.getElementById('list');
  const input = document.getElementById('newItem');
  const addBtn = document.getElementById('add');
  let items = JSON.parse(localStorage.getItem('checklist') || 'null') ?? [
    { text: 'Разминка 5–10 минут', done: false },
    { text: 'Основные подходы', done: false },
    { text: 'Заминка/растяжка', done: false }
  ];

  function render(){
    listEl.innerHTML = items.map((it, i) => `
      <li class="flex items-center gap-2" data-i="${i}">
        <div class="flex flex-col">
          <button type="button" class="px-1 text-xs hover:bg-gray-100 dark:hover:bg-gray-700 rounded disabled:opacity-30" data-up="${i}" ${i === 0 ? 'disabled' : ''} aria-label="Вверх">▲</button>
          <button type="button" class="px-1 text-xs hover:bg-gray-100 dark:hover:bg-gray-700 rounded disabled:opacity-30" data-down="${i}" ${i === items.length - 1 ? 'disabled' : ''} aria-label="Вниз">▼</button>
        </div>
        <input type="checkbox" data-i="${i}" ${it.done?'checked':''} />
        <input type="text" data-edit="${i}" class="border rounded px-2 py-1 flex-1" value="${it.text}" />
        <button data-del="${i}" class="text-red-600 hover:underline">Удалить</button>
      </li>
    `).join('');
  }
  function save(){ localStorage.setItem('checklist', JSON.stringify(items)); }
  addBtn.addEventListener('click', () => { const t = input.value.trim(); if (!t) return; items.push({ text: t, done: false }); input.value=''; save(); render(); });
  listEl.addEventListener('change', (e) => {
    const t = e.target; if (t.matches('input[type="checkbox"][data-i]')) { const i = +t.getAttribute('data-i'); items[i].done = t.checked; save(); }
  });
  listEl.addEventListener('input', (e) => { const t = e.target; if (t.matches('input[type="text"][data-edit]')) { const i = +t.getAttribute('data-edit'); items[i].text = t.value; save(); } });
  listEl.addEventListener('click', (e) => { 
    const t = e.target; 
    if (t.matches('button[data-del]')) { 
      const i = +t.getAttribute('data-del'); 
      items.splice(i,1); 
      save(); 
      render(); 
    }
    if (t.matches('button[data-up]')) {
      const i = +t.getAttribute('data-up');
      if (i > 0) {
        [items[i-1], items[i]] = [items[i], items[i-1]];
        save();
        render();
      }
    }
    if (t.matches('button[data-down]')) {
      const i = +t.getAttribute('data-down');
      if (i < items.length - 1) {
        [items[i], items[i+1]] = [items[i+1], items[i]];
        save();
        render();
      }
    }
  });
  render();
</script>


