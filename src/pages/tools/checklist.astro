---
import Layout from '../../layouts/Layout.astro';
---

<Layout>
	<section class="prose prose-zinc dark:prose-invert max-w-none">
		<h1>Чек‑лист тренировки</h1>
		<p>Отметьте пункты перед/после тренировки. Пункты можно редактировать и менять порядок.</p>
		<div class="not-prose grid gap-4 max-w-xl">
			<ul id="list" class="grid gap-2"></ul>
			<div class="flex gap-2">
				<input id="newItem" class="border rounded px-3 py-2 flex-1" placeholder="Добавить пункт" />
				<button id="add" class="rounded border px-3 py-2">Добавить</button>
			</div>
		</div>
	</section>
</Layout>

<script>
  const listEl = document.getElementById('list');
  const input = document.getElementById('newItem');
  const addBtn = document.getElementById('add');
  let items = JSON.parse(localStorage.getItem('checklist') || 'null') ?? [
    { text: 'Разминка 5–10 минут', done: false },
    { text: 'Основные подходы', done: false },
    { text: 'Заминка/растяжка', done: false }
  ];

  function render(){
    listEl.innerHTML = items.map((it, i) => `
      <li class="flex items-center gap-2" draggable="true" data-i="${i}">
        <button type="button" class="px-2 cursor-grab select-none" data-handle aria-label="Перетащить">↕</button>
        <input type="checkbox" data-i="${i}" ${it.done?'checked':''} />
        <input type="text" data-edit="${i}" class="border rounded px-2 py-1 flex-1" value="${it.text}" />
        <button data-del="${i}" class="text-red-600 hover:underline">Удалить</button>
      </li>
    `).join('');
  }
  function save(){ localStorage.setItem('checklist', JSON.stringify(items)); }
  addBtn.addEventListener('click', () => { const t = input.value.trim(); if (!t) return; items.push({ text: t, done: false }); input.value=''; save(); render(); });
  listEl.addEventListener('change', (e) => {
    const t = e.target; if (t.matches('input[type="checkbox"][data-i]')) { const i = +t.getAttribute('data-i'); items[i].done = t.checked; save(); }
  });
  listEl.addEventListener('input', (e) => { const t = e.target; if (t.matches('input[type="text"][data-edit]')) { const i = +t.getAttribute('data-edit'); items[i].text = t.value; save(); } });
  listEl.addEventListener('click', (e) => { const t = e.target; if (t.matches('button[data-del]')) { const i = +t.getAttribute('data-del'); items.splice(i,1); save(); render(); } });
  let dragIndex = null;
  let dragEl = null;
  listEl.addEventListener('dragstart', (e) => {
    const li = e.target.closest('li[draggable]');
    if (!li) return;
    if (!e.target.closest('[data-handle]')) { e.preventDefault(); return; }
    dragIndex = +li.getAttribute('data-i');
    e.dataTransfer.effectAllowed = 'move';
    try { e.dataTransfer.setData('text/plain', String(dragIndex)); } catch {}
    dragEl = li;
    li.classList.add('opacity-50');
  });
  listEl.addEventListener('dragover', (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  });
  listEl.addEventListener('drop', (e) => {
    e.preventDefault();
    const li = e.target.closest('li[draggable]');
    if (!li || dragIndex === null) return;
    const to = +li.getAttribute('data-i');
    if (to === dragIndex) { dragIndex = null; render(); return; }
    const [moved] = items.splice(dragIndex, 1);
    let toIndex = to;
    if (toIndex > dragIndex) toIndex -= 1;
    items.splice(toIndex, 0, moved);
    save();
    dragIndex = null;
    render();
  });
  listEl.addEventListener('dragend', () => { dragIndex = null; if (dragEl) { dragEl.classList.remove('opacity-50'); dragEl = null; } });
  render();
</script>


